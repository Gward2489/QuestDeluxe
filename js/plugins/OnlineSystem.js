var Plugins=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=n(5),o=n(15),i=Object.prototype.toString;function s(e){return"[object Array]"===i.call(e)}function c(e){return null!==e&&"object"===(void 0===e?"undefined":r(e))}function u(e){return"[object Function]"===i.call(e)}function p(e,t){if(null!==e&&void 0!==e)if("object"!==(void 0===e?"undefined":r(e))&&(e=[e]),s(e))for(var n=0,a=e.length;n<a;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:c,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return c(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:p,merge:function e(){var t={};function n(n,a){"object"===r(t[a])&&"object"===(void 0===n?"undefined":r(n))?t[a]=e(t[a],n):t[a]=n}for(var a=0,o=arguments.length;a<o;a++)p(arguments[a],n);return t},extend:function(e,t,n){return p(t,function(t,r){e[r]=n&&"function"==typeof t?a(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.$onlineParty=t.$gameNetwork=void 0;var r=n(10),a=n(11);o(n(3)),o(n(33));function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.$gameNetwork=i,t.$onlineParty=s;var i=null,s=null,c=DataManager.createGameObjects;DataManager.createGameObjects=function(){c.call(this),t.$gameNetwork=i=i||new r.Game_Network,t.$onlineParty=s=s||new a.Online_Party}},function(e,t,n){"use strict";(function(t){var r=n(0),a=n(18),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(6):void 0!==t&&(e=n(6)),e}(),transformRequest:[function(e,t){return a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(e){s.headers[e]={}}),r.forEach(["post","put","patch"],function(e){s.headers[e]=r.merge(o)}),e.exports=s}).call(this,n(17))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Game_NetworkPlayer=t.Game_Map=t.Game_Player=t.Spriteset_Map=t.Scene_Map=void 0;var r=n(1);t.Scene_Map=Scene_Map,t.Spriteset_Map=Spriteset_Map,t.Game_Player=Game_Player,t.Game_Map=Game_Map,t.Game_NetworkPlayer=o;var a=Scene_Map.prototype.onMapLoaded;function o(){this.initialize.apply(this,arguments)}Scene_Map.prototype.onMapLoaded=function(){if(a.call(this),$gameMap._mapId!==r.$gameNetwork.currentMapId){var e=r.$gameNetwork.GetPlayerCasterData();r.$gameNetwork.mapConnection.invoke("RemoveFromMapGroup","mapRoom"+r.$gameNetwork.currentMapId,JSON.stringify(e));for(var t=[],n=0;n<$dataMap.events.length;n++)null!==$dataMap.events[n]&&!0===$dataMap.events[n]._isNetworkPlayerEvent&&t.push(n);t.length>0&&t.forEach(function(e){$dataMap.events.splice(e,1)});for(var o=[],i=1;i<$gameMap._events.length;i++)$gameMap._events[i]._accountUserName&&!0===$gameMap._events[i]._isNetworkPlayerEvent&&o.push(i);o.length>0&&o.forEach(function(e){$gameMap._events.splice(e,1)});var s=[],c=r.$gameNetwork.networkMapEvents;for(var u in c)c.hasOwnProperty(u)&&!0===c[u]._isNetworkPlayerEvent&&s.push(c[u]._accountUserName);s.length>0&&s.forEach(function(e){delete r.$gameNetwork.networkMapEvents[e]}),SceneManager._scene._spriteset.clearAllNetworkPlayerEvents(),r.$gameNetwork.currentMapId=$gameMap._mapId,r.$gameNetwork.mapConnection.invoke("AddToMapGroup","mapRoom"+r.$gameNetwork.currentMapId,JSON.stringify(e))}r.$gameNetwork.game_loaded=!0},Spriteset_Map.prototype.clearNetworkPlayer=function(e){for(var t=0;t<this._characterSprites.length;t++){this._characterSprites[t]._character._accountUserName===e&&this._tilemap.removeChild(this._characterSprites[t])}},Spriteset_Map.prototype.clearAllNetworkPlayerEvents=function(){for(var e=0;e<this._characterSprites.length;e++){!0===this._characterSprites[e]._character._isNetworkPlayerEvent&&this._tilemap.removeChild(this._characterSprites[e])}},Game_Player.prototype.UpdateNetworkPlayer=function(e){var t=e.accountUserName,n=r.$gameNetwork.networkMapEvents;n[t].setMoveSpeed(e.moveSpeed),n[t].setMoveFrequency(e.moveFrequenzy),n[t].moveStraight(e.direction),n[t].x===e.x&&n[t].y===e.y||n[t].setPosition(e.x,e.y),n[t]._characterName=e.characterName,n[t]._characterIndex=e.characterIndex},Game_Player.prototype.moveByInput=function(){if(!this.isMoving()&&this.canMove()){var e=this.getInputDirection();if(e>0)$gameTemp.clearDestination();else if($gameTemp.isDestinationValid()){var t=$gameTemp.destinationX(),n=$gameTemp.destinationY();e=this.findDirectionTo(t,n)}if(e>0){if(this.executeMove(e),r.$gameNetwork.currentMapId!==$gameMap._mapId){var a=r.$gameNetwork.GetPlayerCasterData();try{r.$gameNetwork.mapConnection.invoke("RemoveFromMapGroup","mapRoom"+r.$gameNetwork.currentMapId,JSON.stringify(a))}catch(e){console.error(e.toString())}r.$gameNetwork.currentMapId=$gameMap._mapId;try{r.$gameNetwork.mapConnection.invoke("AddToMapGroup","mapRoom"+r.$gameNetwork.currentMapId,JSON.stringify(a))}catch(e){console.error(e.toString())}}var o=r.$gameNetwork.GetPlayerCasterData(),i="mapRoom"+$gameMap._mapId;r.$gameNetwork.mapConnection.invoke("BroadcastToMapGroup",i,JSON.stringify(o))}}},Game_Player.prototype.seedNewPlayerEvent=function(e,t,n){var r=$dataMap.events.length,a='{"id":'+r+',"name":"'+n+'","note":"","pages":[{"conditions":{"actorId":1,"actorValid":false,"itemId":1,"itemValid":false,"selfSwitchCh":"A","selfSwitchValid":false,"switch1Id":1,"switch1Valid":false,"switch2Id":1,"switch2Valid":false,"variableId":1,"variableValid":false,"variableValue":0},"directionFix":false,"image":{"characterIndex":0,"characterName":"","direction":2,"pattern":0,"tileId":0},"list":[{"code":0,"indent":0,"parameters":[]}],"moveFrequency":3,"moveRoute":{"list":[{"code":0,"parameters":[]}],"repeat":true,"skippable":false,"wait":false},"moveSpeed":3,"moveType":0,"priorityType":0,"stepAnime":false,"through":false,"trigger":0,"walkAnime":true}],"x":'+e+',"y":'+t+',"meta":{},"_isNetworkPlayerEvent":true}';return $dataMap.events.push(JSON.parse(a)),r},Game_Map.prototype.addNetworkPlayer=function(e,t,n){var r=Game_Player.prototype.seedNewPlayerEvent(e,t,n),a=this._events.length;return this._events[a]=new o(this._mapId,r,e,t),this._events[a]._accountUserName=n,this._events[a]._isNetworkPlayerEvent=!0,SceneManager._scene._spriteset.createNetworkPlayer(a,n),this._events[a]},Spriteset_Map.prototype.createNetworkPlayer=function(e,t){var n=$gameMap._events[e],r=this._characterSprites.length;this._characterSprites[r]=new Sprite_Character(n),this._characterSprites[r]._accountUserName=t,this._characterSprites[r].update(),this._tilemap.addChild(this._characterSprites[r])},o.prototype=Object.create(Game_Event.prototype),o.prototype.constructor=o,o.prototype.initialize=function(e,t,n,r){Game_Event.prototype.initialize.call(this,e,t),this._isNetworkPlayer=!0,this.setPosition(n,r)}},function(e,t,n){"use strict";e.exports=n(14)},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),a=n(19),o=n(21),i=n(22),s=n(23),c=n(7),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(24);e.exports=function(e){return new Promise(function(t,p){var l=e.data,d=e.headers;r.isFormData(l)&&delete d["Content-Type"];var m=new XMLHttpRequest,f="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in m||s(e.url)||(m=new window.XDomainRequest,f="onload",h=!0,m.onprogress=function(){},m.ontimeout=function(){}),e.auth){var y=e.auth.username||"",v=e.auth.password||"";d.Authorization="Basic "+u(y+":"+v)}if(m.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,m[f]=function(){if(m&&(4===m.readyState||h)&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in m?i(m.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?m.response:m.responseText,status:1223===m.status?204:m.status,statusText:1223===m.status?"No Content":m.statusText,headers:n,config:e,request:m};a(t,p,r),m=null}},m.onerror=function(){p(c("Network Error",e,null,m)),m=null},m.ontimeout=function(){p(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",m)),m=null},r.isStandardBrowserEnv()){var g=n(25),w=(e.withCredentials||s(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;w&&(d[e.xsrfHeaderName]=w)}if("setRequestHeader"in m&&r.forEach(d,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete d[t]:m.setRequestHeader(t,e)}),e.withCredentials&&(m.withCredentials=!0),e.responseType)try{m.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){m&&(m.abort(),p(e),m=null)}),void 0===l&&(l=null),m.send(l)})}},function(e,t,n){"use strict";var r=n(20);e.exports=function(e,t,n,a,o){var i=new Error(e);return r(i,t,n,a,o)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Game_Network=void 0;var r=n(1),a=(n(3),a||{});function o(){this.initialize.apply(this,arguments)}a.OnlineCore=!0,t.Game_Network=o,o.prototype.initialize=function(){this.apiUrl="http://localhost:5000/api",this.token="",this.userEmail="",this.userAccountName="",this.currentMapId=0,this.mapConnection={},this.networkMapEvents={},this.game_loaded=!1,this.loadedGames=[]},o.prototype.connectMapSocketAfterLogin=function(){var e=(new signalR.HubConnectionBuilder).withUrl("http://localhost:5000/gameMapHub").build();r.$gameNetwork.mapConnection=e,async function(){try{await r.$gameNetwork.mapConnection.start();var e=r.$gameNetwork.GetPlayerCasterData();r.$gameNetwork.mapConnection.invoke("AddToMapGroup","mapRoom"+r.$gameNetwork.currentMapId,JSON.stringify(e)),r.$gameNetwork.mapConnection.on("NewPlayerOnMap",function(e){var t=JSON.parse(e);0!==t.x&&0!==t.y||(t.x=1,t.y=1);var n=$gameMap.addNetworkPlayer(t.x,t.y,t.accountUserName);r.$gameNetwork.networkMapEvents[t.accountUserName]=n,r.$onlineParty.members.push(n),Game_Player.prototype.UpdateNetworkPlayer(t);var a=o.prototype.GetPlayerCasterData();r.$gameNetwork.mapConnection.invoke("BroadcastToMapGroup","mapRoom"+r.$gameNetwork.currentMapId,JSON.stringify(a))}),r.$gameNetwork.mapConnection.on("PlayerMapUpdate",function(e){if(SceneManager._scene._spriteset&&!(SceneManager._scene instanceof Scene_Battle)){var t=JSON.parse(e);if(r.$gameNetwork.networkMapEvents[t.accountUserName])Game_Player.prototype.UpdateNetworkPlayer(t);else{var n=$gameMap.addNetworkPlayer(t.x,t.y,t.accountUserName);r.$gameNetwork.networkMapEvents[t.accountUserName]=n,r.$onlineParty.members.push(n),Game_Player.prototype.UpdateNetworkPlayer(t)}}}),r.$gameNetwork.mapConnection.on("RemovePlayerFromMap",function(e){for(var t=JSON.parse(e),n=0,a=0;a<$dataMap.events.length;a++)null!==$dataMap.events[a]&&$dataMap.events[a].name===t.accountUserName&&(n=a);$dataMap.events.splice(n,1);for(var o=0,i=1;i<$gameMap._events.length;i++)$gameMap._events[i]._accountUserName&&$gameMap._events[i]._accountUserName===t.accountUserName&&(o=i);$gameMap._events.splice(o,1),delete r.$gameNetwork.networkMapEvents[t.accountUserName],SceneManager._scene._spriteset.clearNetworkPlayer(t.accountUserName)})}catch(e){console.error(e.toString())}}()},o.prototype.CaptureLoginResponse=function(e){r.$gameNetwork.token=e.token,r.$gameNetwork.userEmail=e.email,r.$gameNetwork.userAccountName=e.user},o.prototype.GetPlayerCasterData=function(){return{accountUserName:r.$gameNetwork.userAccountName,direction:$gamePlayer._direction,x:$gamePlayer._x,y:$gamePlayer._y,moveSpeed:$gamePlayer._moveSpeed,moveFrequenzy:$gamePlayer._moveFrequency,characterName:$gamePlayer._characterName,characterIndex:$gamePlayer._characterIndex}},o.prototype.LoadGameFilesFromServer=function(e,t){$.get(r.$gameNetwork.apiUrl+"/GameData/"+e,function(e){console.log(e),t(e)}).fail(function(){window.alert("Load failed")})},o.prototype.CreateNewUser=function(e,t){$.ajax({url:r.$gameNetwork.apiUrl+"/Accounts/register",type:"POST",data:e,contentType:"application/json",success:function(e){t()},error:function(e){console.log(e)}})},o.prototype.LogUserIn=function(e,t){$.ajax({url:r.$gameNetwork.apiUrl+"/Accounts/login",type:"POST",data:e,contentType:"application/json",success:function(e){r.$gameNetwork.userEmail=e.email,o.prototype.CaptureLoginResponse(e),t()},error:function(e){console.log(e)}})},o.prototype.ClassSelect=function(e,t,n){var r=[];"Clansmen"===t?r=[null,{altClassName:""+t,id:1,battlerName:"Actor1_1",characterIndex:0,characterName:"Actor1",classId:1,equips:[1,1,2,3,0],faceIndex:0,faceName:"Actor1",traits:[],initialLevel:1,maxLevel:99,name:""+n,nickname:"",note:"",profile:""}]:"Big Hat"===t?r=[null,{altClassName:""+t,id:2,battlerName:"Actor2_5",characterIndex:4,characterName:"Actor2",classId:3,equips:[3,0,0,0,0],faceIndex:4,faceName:"Actor2",traits:[],initialLevel:1,maxLevel:99,name:""+n,nickname:"",note:"",profile:""}]:"Divine"===t?r=[null,{altClassName:""+t,id:4,battlerName:"Actor2_4",characterIndex:3,characterName:"Actor3",classId:4,equips:[4,0,0,0,0],faceIndex:3,faceName:"Actor3",traits:[],initialLevel:1,maxLevel:99,name:""+n,nickname:"",note:"",profile:""}]:"Mercenary"===t&&(r=[null,{altClassName:""+t,id:3,battlerName:"Actor1_7",characterIndex:6,characterName:"Actor1",classId:2,equips:[2,0,0,0,0],faceIndex:6,faceName:"Actor1",traits:[],initialLevel:1,maxLevel:99,name:""+n,nickname:"",note:"",profile:""}]),$dataActors=r;var a=new Game_Actors,o=new Game_Actor(1),i=Object.assign(o,r[1]);return r[1]=i,a._data=r,e.actors=a,e.dataActors=$dataActors,e},o.prototype.LoadSavedGame=function(e){DataManager.createGameObjects(),DataManager.extractSaveContents(e),$dataActors=e.dataActors;var t=new Game_Actors,n=new Game_Actor(1);t._data=[null,n],$gameActors=t,r.$gameNetwork.currentMapId=$dataSystem.startMapId,Graphics.frameCount=0,SceneManager.goto(Scene_Map),r.$gameNetwork.connectMapSocketAfterLogin()},o.prototype.CreateNewGame=function(e,t,n,a){var o=DataManager.makeSaveContents(),i=r.$gameNetwork.ClassSelect(o,t,a),s=JsonEx.stringify(i);console.log("yippe"),$.ajax({url:r.$gameNetwork.apiUrl+"/GameData/SaveNewGame/"+e,type:"POST",data:s,processData:!1,contentType:"application/json",success:function(){n()}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Online_Party_Window=t.Online_Party=void 0;var r=n(1),a=n(12),o=function(e){return e&&e.__esModule?e:{default:e}}(n(4));function i(){this.initialize.apply(this,arguments)}function s(){this.initialize.apply(this,arguments)}t.Online_Party=i,t.Online_Party_Window=s,i.prototype.initialize=function(){this.members=[],this.partyConnection={},this.isHost=!1,this.partiesSeeking=[],this.playerOptions=[],this.partyOptions=[],this.currentPartyPortal={}},i.prototype.makeNewPartyConnection=function(e){var t=(new signalR.HubConnectionBuilder).withUrl("http://localhost:5000/onlinePartyHub").build();r.$onlineParty.partyConnection=t,async function(){try{if(await r.$onlineParty.partyConnection.start(),e){r.$onlineParty.partyConnection.on("NewPartyWithHost",function(e){r.$onlineParty.isHost=!0,$gameMessage.add("Your Party Was Created !!"),SceneManager._scene.addChild(new s)}),r.$onlineParty.partyConnection.invoke("AddToPartyAsHost","party:"+r.$gameNetwork.userAccountName,"hello")}}catch(e){console.error(e.toString()),$gameMessages.add("Your Party failed to create ")}}()},i.prototype.makeOnlinePartyPortal=function(){var e=this;o.default.get(r.$gameNetwork.apiUrl+"/parties",{contentType:"application/json"}).then(function(t){r.$onlineParty.partyOptions=t.data;var n=new a.PartyPortalWindow(300,300);r.$onlineParty.currentPartyPortal=n,r.$onlineParty.currentPartyPortal.setHandler("joinParty",e.addPlayerToParty.bind(e)),SceneManager._scene.addChild(n)})},i.prototype.populatePlayerOptions=function(){var e=r.$gameNetwork.networkMapEvents;for(var t in r.$onlineParty.playerOptions=[],e){var n=e[t];r.$onlineParty.playerOptions.push(n)}},i.prototype.addPlayerToParty=function(e){console.log("score");this.currentPartyPortal.currentExt()},i.prototype.newPartyAsHost=function(){var e={host:r.$gameNetwork.userAccountName,players:[r.$gameNetwork.userAccountName]};r.$onlineParty.partiesSeeking.push(e),r.$onlineParty.makeNewPartyConnection(!0)},s.prototype=Object.create(Window_Base.prototype),s.prototype.constructor=s,s.prototype.initialize=function(){Window_Base.prototype.initialize.call(this,0,0,200,100);this.drawTextEx(""+r.$gameNetwork.userAccountName,2,2)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PartyPortalWindow=void 0;var r=n(1);a(n(13)),a(n(4));function a(e){return e&&e.__esModule?e:{default:e}}function o(e,t){Window_Command.prototype.initialize.call(this,e,t,100,100)}t.PartyPortalWindow=o,o.prototype=Object.create(Window_Command.prototype),o.prototype.constructor=o,o.prototype.initialize=function(){this._openParties=[]},o.prototype.makeCommandList=function(){this.makePartyCommands()},o.prototype.populatePlayerOptions=function(){var e=r.$gameNetwork.networkMapEvents;for(var t in e){var n=e[t];r.$onlineParty.playerOptions.push(n)}},o.prototype.populatePartyOptions=function(){var e=this;r.$onlineParty.openParties.forEach(function(t){e.partyOptions.push(t)})},o.prototype.makeCharacterCommands=function(){var e=this;r.$onlineParty.playerOptions.forEach(function(t){e.addCommand(""+t._accountUserName,"addPlayerToParty",!0,""+t._accountUserName)})},o.prototype.makePartyCommands=function(){var e=this;r.$onlineParty.partyOptions.forEach(function(t){e.addCommand(""+t.partyName,"joinParty",!0,""+t.partyName)})},o.prototype.buildWindow=function(){this.clearCommandList(),this.makePartyCommands(),this.setHandler("addPlayerToParty",r.$onlineParty.currentPartyPortal.addPlayerToParty.bind(this))}},function(e,t,n){"use strict"},function(e,t,n){"use strict";var r=n(0),a=n(5),o=n(16),i=n(2);function s(e){var t=new o(e),n=a(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var c=s(i);c.Axios=o,c.create=function(e){return s(r.merge(i,e))},c.Cancel=n(9),c.CancelToken=n(31),c.isCancel=n(8),c.all=function(e){return Promise.all(e)},c.spread=n(32),e.exports=c,e.exports.default=c},function(e,t,n){"use strict";
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(2),a=n(0),o=n(26),i=n(27);function s(e){this.defaults=e,this.interceptors={request:new o,response:new o}}s.prototype.request=function(e){"string"==typeof e&&(e=a.merge({url:arguments[0]},arguments[1])),(e=a.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},a.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(a.merge(n||{},{method:e,url:t}))}}),a.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(a.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t,n){"use strict";var r,a,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function c(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{a="function"==typeof clearTimeout?clearTimeout:s}catch(e){a=s}}();var u,p=[],l=!1,d=-1;function m(){l&&u&&(l=!1,u.length?p=u.concat(p):d=-1,p.length&&f())}function f(){if(!l){var e=c(m);l=!0;for(var t=p.length;t;){for(u=p,p=[];++d<t;)u&&u[d].run();d=-1,t=p.length}u=null,l=!1,function(e){if(a===clearTimeout)return clearTimeout(e);if((a===s||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(e);try{a(e)}catch(t){try{return a.call(null,e)}catch(t){return a.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new h(e,t)),1!==p.length||l||c(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(7);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e}},function(e,t,n){"use strict";var r=n(0);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var i=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(a(t)+"="+a(e))}))}),o=i.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,n){"use strict";var r=n(0),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,i={};return e?(r.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(i[t]&&a.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function a(){this.message="String contains an invalid character"}a.prototype=new Error,a.prototype.code=5,a.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),i="",s=0,c=r;o.charAt(0|s)||(c="=",s%1);i+=c.charAt(63&t>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new a;t=t<<8|n}return i}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,o,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(a)&&s.push("path="+a),r.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=a},function(e,t,n){"use strict";var r=n(0),a=n(28),o=n(8),i=n(2),s=n(29),c=n(30);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.baseURL&&!s(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return u(e),t.data=a(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(u(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a(function(t){e=t}),cancel:e}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Input=t.QuestDeluxePortal=void 0;var r=n(1);function a(){this.initialize.apply(this,arguments)}t.QuestDeluxePortal=a,t.Input=Input,a.prototype=Object.create(Scene_Base.prototype),a.prototype.constructor=a,a.prototype.initialize=function(){Scene_Base.prototype.initialize.call(this)},a.prototype.reBindInput=function(){Input.initialize()},a.prototype.create=function(){Scene_Base.prototype.create.call(this),this.createBackground()},a.prototype.reBindInput=function(){Input.initialize()},a.prototype.start=function(){Scene_Base.prototype.start.call(this),SceneManager.clearStack(),this.startFadeIn(this.fadeSpeed(),!1),this.LoginForm()},a.prototype.update=function(){Scene_Base.prototype.update.call(this)},a.prototype.isBusy=function(){return Scene_Base.prototype.isBusy.call(this)},a.prototype.terminate=function(){Scene_Base.prototype.terminate.call(this),SceneManager.snapForBackground()},a.prototype.RegistrationSuccess=function(){var e=Graphics.boxWidth-Graphics.boxWidth/3;$("#ErrorPrinter").html('<div class="registrationSuccessWrapper" style="width:'+e+'px">\n            <div class="registrationSuccessInnerWrapper">\n                <div class="registrationSuccessTextWrapper">\n                    <div class="registrationSuccessText">\n                        Registration Succesful! \n                    </div>\n                </div>\n                <div class="registrationSuccessButtonWrapper">\n                    <button class="registrationSuccessButton">\n                        LOG IN\n                    </button>\n                </div>\n            </div>\n        </div>\n        '),$(".registrationSuccessButton").click(function(){a.prototype.LoginForm()})},a.prototype.RegistrationForm=function(){var e=this,t=Graphics.boxWidth-Graphics.boxWidth/3;$("#ErrorPrinter").html('<div id="RegisterForm" style="width:'+t+'px">\n            <div class="registrationWrapper">\n                <div>\n                    <div class="register-text">\n                        Provide your email address, a desired user name, and a password. \n                    </div>\n                </div>\n\n                <div class="emailWrapper">\n                    <div class="emailInput">\n                        <input class="emailText" placeholder="email">\n                    </div>\n                </div>\n                <div class="accountNameWrapper">\n                    <div class="accountNameInput">\n                        <input class="accountNameText" placeholder="user name">\n                    </div>\n                </div>\n                <div class="passwordWrapper">\n                    <div class="passwordInput">\n                        <input class="passwordText" type="password" placeholder="password">\n                    </div>\n                </div>\n                <div class="registerButtonWrapper">\n                    <div class="registerButton">\n                        <button class="registerSubmitButton">\n                            REGISTER NOW\n                        </button>\n                    </div>\n                </div>\n                <div class="toLoginButtonWrapper">\n                    <div class="toLoginButton">\n                        <button class="toLoginSubmitButton">\n                            LOGIN PORTAL\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>');$(".registerSubmitButton").click(function(t){var n=function(){var e=$(".emailText").val(),t={accountName:$(".accountNameText").val(),password:$(".passwordText").val(),email:e};return JSON.stringify(t)}();r.$gameNetwork.CreateNewUser(n,e.RegistrationSuccess)}),$(".toLoginButton").click(function(e){a.prototype.LoginForm()})},a.prototype.LoginForm=function(){var e=this,t=Graphics.boxWidth-Graphics.boxWidth/3;$("#ErrorPrinter").html('<div id="LoginForm" style="width:'+t+'px">\n            <div class="LoginWrapper">\n                <div>\n                    <div class="welcome-text">\n                        Welcome. Log In below, or click the Sign Up button to create a new account. \n                    </div>\n                </div>\n                <div class="loginEmailWrapper">\n                    <div class="loginEmailInput">\n                        <input class="loginEmailText" placeholder="email">\n                    </div>\n                </div>\n                <div class="loginPasswordWrapper">\n                    <div class="loginPasswordInput">\n                        <input class="loginPasswordText" placeholder="password" type="password">\n                    </div>\n                </div>\n                <div class="loginButtonWrapper">\n                    <div class="loginButton">\n                        <button class="loginSubmitButton">\n                            LOGIN\n                        </button>\n                    </div>\n                </div>\n                <div class="toRegisterWrapper">\n                    <div class="toRegisterButton">\n                        <button class="toRegisterSubmitButton">\n                            SIGN UP!\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>');$(".loginSubmitButton").click(function(t){var n=function(){var e={email:$(".loginEmailText").val(),password:$(".loginPasswordText").val()};return JSON.stringify(e)}();r.$gameNetwork.LogUserIn(n,e.CharacterSelect)}),$(".toRegisterSubmitButton").click(function(e){a.prototype.RegistrationForm()})},a.prototype.CharacterSelect=function(){var e=Graphics.boxWidth-Graphics.boxWidth/3;$("#ErrorPrinter").html('<div id="CharacterSelectScreen" style="width:'+e+'px">\n            <div class="charSelectWrapper">\n                <div class="welcome-text">\n                    Select your character, or create a new one by clicking the new character button. \n                </div>\n                <div class="charSelectButtonsWrapper">\n                    <div class="charSelectButtons">\n                        <button class="newCharacterButton">\n                            NEW CHARACTER\n                        </button>\n                        <button class="logoutButton">\n                            LOG OUT\n                        </button>\n                        <button class="accountOptionsButton">\n                            OPTIONS\n                        </button>\n                    </div>\n                </div>\n                <div class="charactersTableWrapper">\n                    <div class="charactersTableContainer">\n                        <table style="width:100%" class="charactersTable">\n                            <tr>\n                                <th>Select</th>\n                                <th>Level</th> \n                                <th>Class</th>\n                                <th>Character Name</th>\n                            </tr>\n                        </table>\n                        <div class="charactersLoading">\n                            <div>\n                                Loading your characters...\n                            </div>\n                            <div style="margin-top:12px;">\n                                <img src="../extra_images/loading.gif" alt="loading-gif" height="50px" width="50px">\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n                </div> \n            </div>\n        </div>'),$(".charactersTable").hide();r.$gameNetwork.LoadGameFilesFromServer(r.$gameNetwork.userEmail,function(e){$(".charactersLoading").hide(),$(".charactersTable").show(),r.$gameNetwork.loadedGames=[];var t=1;r.$gameNetwork.loadedGames.push(null),e.forEach(function(e){var n=JsonEx.parse(e);r.$gameNetwork.loadedGames.push(n);var o=n.actors._data[1];$(".charactersTable").append(' \n            <tr>\n                <td><button class="game'+t+'">CHOOSE</button></td>\n                <td>'+o.initialLevel+"</td> \n                <td>"+o.altClassName+"</td>\n                <td>"+o.name+"</td>\n            </tr>\n            "),$(".game"+t).attr("gameIndex",""+t).click(function(e){$("#ErrorPrinter").html(""),a.prototype.reBindInput();var t=Number($(e.currentTarget).attr("gameIndex")),n=r.$gameNetwork.loadedGames[t];r.$gameNetwork.LoadSavedGame(n)}),t++})}),$(".newCharacterButton").click(function(){a.prototype.NewCharacter()})},a.prototype.NewCharacter=function(){var e=Graphics.boxWidth-Graphics.boxWidth/3;$("#ErrorPrinter").html('<div id="NewCharacterScreen" class="panel panel-primary" style="width:'+e+'px">\n            <div class="newCharacterWrapper">\n                <div class="nameWarning">\n                    <div class="infoText">\n                        You must enter a name for your character\n                    </div>\n                    <div>\n                    <button class="confirmNameWarning">\n                        OK\n                    </button>\n                    </div>   \n                </div>\n                <div class="charSelectMain">\n                    <div class="infoTextWrapper">\n                        <div class="infoTextInnerWrapper">\n                            <div class="infoText">\n                                Enter a character name and select your base class\n                            </div>\n                        </div>\n                    </div>\n                    <div class="characterNameWrapper">\n                        <div class="characterNameInput">\n                            <input class="characterNameInputText" type="text" placeholder="character name">\n                        </div>\n                    </div>\n\n                    <div class="clansmanClassWrapper">\n                        <div class="clansmanClassInnerWrapper">\n                            <button class="clansmenButton">\n                                CLANSMEN\n                            </button>\n                        </div>\n                    </div>\n\n                    <div class="bighatClassWrapper">\n                        <div class="bighatClassInnerWrapper">\n                            <button class="bighatButton">\n                                BIG HAT\n                            </button>\n                        </div>\n                    </div>\n\n                    <div class="divineClassWrapper">\n                        <div class="divinClassInnerWrapper">\n                            <button class="divineClassButton">\n                                DIVINE\n                            </button>\n                        </div>\n                    </div>\n\n                    <div class="mercenaryClassWrapper">\n                        <div class="mercenaryClassInnerWrapper">\n                            <button class="mercenaryClassButton">\n                                MERCENARY\n                            </button>\n                        </div>\n                    </div>     \n                </div>\n            </div>\n        </div>'),$(".nameWarning").hide();var t=function(){return $(".characterNameInputText").val()};$(".confirmNameWarning").click(function(){$(".nameWarning").hide(),$(".charSelectMain").show()}),$(".clansmenButton").click(function(){var e=t();if(""===e)return $(".charSelectMain").hide(),void $(".nameWarning").show();r.$gameNetwork.CreateNewGame(r.$gameNetwork.userEmail,"Clansmen",a.prototype.CharacterSelect,e),a.prototype.loadingScreen()}),$(".bighatButton").click(function(){var e=t();if(""===e)return $(".charSelectMain").hide(),void $(".nameWarning").show();r.$gameNetwork.CreateNewGame(r.$gameNetwork.userEmail,"Big Hat",a.prototype.CharacterSelect,e),a.prototype.loadingScreen()}),$(".divineClassButton").click(function(){var e=t();if(""===e)return $(".charSelectMain").hide(),void $(".nameWarning").show();r.$gameNetwork.CreateNewGame(r.$gameNetwork.userEmail,"Divine",a.prototype.CharacterSelect,e),a.prototype.loadingScreen()}),$(".mercenaryClassButton").click(function(){var e=t();if(""===e)return $(".charSelectMain").hide(),void $(".nameWarning").show();r.$gameNetwork.CreateNewGame(r.$gameNetwork.userEmail,"Mercenary",a.prototype.CharacterSelect,e),a.prototype.loadingScreen()})},a.prototype.loadingScreen=function(){var e=Graphics.boxWidth-Graphics.boxWidth/3;$("#ErrorPrinter").html('<div id="loadingScreen" style="width:'+e+'px">\n            <div class="loadingScreenWrapper">\n                <div>\n                    Creating New Game...\n                </div>\n                <div style="margin-top:12px;">\n                    <img src="../extra_images/loading.gif" alt="loading-gif" height="80px" width="80px">\n                </div>\n            </div>\n        </div>')},a.prototype.createBackground=function(){this._backSprite1=new Sprite(ImageManager.loadTitle1($dataSystem.title1Name)),this._backSprite2=new Sprite(ImageManager.loadTitle2($dataSystem.title2Name)),this.addChild(this._backSprite1),this.addChild(this._backSprite2),this.centerSprite(this._backSprite1),this.centerSprite(this._backSprite2),this.createForeground()},a.prototype.createForeground=function(){this._gameTitleSprite=new Sprite(new Bitmap(Graphics.width,Graphics.height)),this.addChild(this._gameTitleSprite),$dataSystem.optDrawTitle&&this.drawGameTitle()},a.prototype.drawGameTitle=function(){var e=Graphics.height/4,t=Graphics.width-40,n=$dataSystem.gameTitle;this._gameTitleSprite.bitmap.outlineColor="black",this._gameTitleSprite.bitmap.outlineWidth=8,this._gameTitleSprite.bitmap.fontSize=72,this._gameTitleSprite.bitmap.drawText(n,20,e,t,48,"center")},a.prototype.centerSprite=function(e){e.x=Graphics.width/2,e.y=Graphics.height/2,e.anchor.x=.5,e.anchor.y=.5},a.prototype.playTitleMusic=function(){AudioManager.playBgm($dataSystem.titleBgm),AudioManager.stopBgs(),AudioManager.stopMe()},Scene_Boot.prototype.start=function(){Scene_Base.prototype.start.call(this),SoundManager.preloadImportantSounds(),DataManager.isBattleTest()?(DataManager.setupBattleTest(),SceneManager.goto(Scene_Battle)):DataManager.isEventTest()?(DataManager.setupEventTest(),SceneManager.goto(Scene_Map)):(this.checkPlayerLocation(),DataManager.setupNewGame(),SceneManager.goto(a)),this.updateDocumentTitle()},Input._onKeyDown=function(e){this._shouldPreventDefault(e)&&e.preventDefault(),144===e.keyCode&&this.clear();var t=this.keyMapper[e.keyCode];t&&(this._currentState[t]=!0)},Input._shouldPreventDefault=function(e){switch(e.keyCode){case 8:if($(e.target).is("input, textarea"))break;case 33:case 34:case 37:case 38:case 39:case 40:return!0}return!1}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,